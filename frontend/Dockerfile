# ALNWOKS Frontend Dockerfile
# Multi-stage build for optimized production image

# Build stage
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including devDependencies for build tools)
RUN npm ci

# Copy source code
COPY . .

# Build the application (CSS via PostCSS/Tailwind, JS via webpack)
ENV NODE_ENV=production
RUN npm run build

# Production stage
FROM nginx:alpine

# Set nginx working dir and ensure directories exist
WORKDIR /usr/share/nginx/html

# Copy nginx configuration
COPY --from=builder /app/nginx.conf /etc/nginx/nginx.conf

# Copy built assets from builder stage
# CSS -> /usr/share/nginx/html/css ; JS -> /usr/share/nginx/html/js
COPY --from=builder /app/dist/css ./css
COPY --from=builder /app/dist/js ./js

# Copy entry HTML generated by HtmlWebpackPlugin
COPY --from=builder /app/dist/index.html ./index.html

# Optionally copy static assets if present (images, icons)
# COPY --from=builder /app/assets ./assets

# Expose port 80
EXPOSE 80

# Health check (hit explicit health endpoint defined in nginx.conf)
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/health || exit 1

# Nginx will start automatically