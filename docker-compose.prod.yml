# ALNWOKS Solutions Limited - Docker Compose Configuration
# Complete application stack with frontend, backend, and supporting services

version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: alnwoks-frontend
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    volumes:
      - ./frontend/logs:/var/log/nginx
    networks:
      - alnwoks-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`alnwoks.local`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  # Backend Service (Future Implementation)
  backend:
    image: node:18-alpine
    container_name: alnwoks-backend
    working_dir: /app
    command: sh -c "echo 'Backend service placeholder - to be implemented' && sleep infinity"
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://alnwoks:password@postgres:5432/alnwoks
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - alnwoks-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    profiles:
      - backend

  # Database Service
  postgres:
    image: postgres:15-alpine
    container_name: alnwoks-postgres
    environment:
      - POSTGRES_DB=alnwoks
      - POSTGRES_USER=alnwoks
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - alnwoks-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U alnwoks -d alnwoks" ]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - backend

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: alnwoks-redis
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - alnwoks-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - backend
  # Reverse Proxy (Traefik)
  # traefik:
  #   image: traefik:v3.0
  #   container_name: alnwoks-traefik
  #   command:
  #     - "--api.insecure=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080" # Traefik dashboard
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   networks:
  #     - alnwoks-network
  #   restart: unless-stopped
  #   profiles:
  #     - proxy

  # Monitoring - Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: alnwoks-prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - alnwoks-network
  #   restart: unless-stopped
  #   profiles:
  #     - monitoring

  # Monitoring - Grafana
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: alnwoks-grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
  #   ports:
  #     - "3002:3000"
  #   networks:
  #     - alnwoks-network
  #   restart: unless-stopped
  #   depends_on:
  #     - prometheus
  #   profiles:
  #     - monitoring

  # Networks
networks:
  alnwoks-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
